# List of labels to add or update.
# Each element has some properties. (Read about labels: https://docs.github.com/en/rest/reference/issues#update-a-label)
#   name: The name of the label.
#   description: A short description of the label.
#   color: The hexadecimal color code for the label, without the leading #.
labels:
- name: Archived
  description: An issue no longer relevant, but can be reopened.
  color: fef2c0
- name: Bug
  description: An issue describes an unexpected problem or unintended behavior.
  color: f9d0c4

list:
  # Body format of repository list.
  # Available values:
  #   context: Context object passed into action as 'context' parameter.
  #   groups: Array of the group objects. (Read about group object below.)
  #   groupsFormatted: Formatted groups as text.
  # Description of group object.
  # group:
  #   name: Name of group from config.
  #   description: Description of group from config.
  #   repositories: Array of repository objects. (Read about repository object: https://docs.github.com/en/rest/reference/repos#list-repositories-for-a-user.)
  body: |
    # Repositories

    List of available repositories.

    {groupsFormatted}

  # Group format of repositories.
  # Available values:
  #   context: Context object passed into action as 'context' parameter.
  #   groups: Array of the group objects. (Same as groups in body.)
  #   group: Group object. (Read about group in body description.)
  #   repositoriesFormatted: Formatted repositories as text.
  group: |
    ## {group.name}

    {group.description}

    {repositoriesFormatted}

  # Repository format
  # Available values:
  #   context: Context object passed into action as 'context' parameter.
  #   repositories: Array of repository objects. (Read about repository object: https://docs.github.com/en/rest/reference/repos#list-repositories-for-a-user.)
  #   repository: Repository object.
  #   repositoryLabelFormatted: Repository label formatted as text.
  #   repositoryReleaseFormatted: Repository release formatted as text.
  repository: |
    - [{repository.name}]({repository.html_url}) {repositoryReleaseFormatted}{repositoryLabelFormatted}  
      {repository.description}

  # Repository label format.
  # Repository label is similar label which displayed at GitHub website when repository has private, template or archived flags.
  # Formatting does not applied when repository has no label, in this case empty string returned.
  # Available values:
  #   context: Context object passed into action as 'context' parameter.
  #   repository: Repository object.
  #   repositoryLabel: Repository label text.
  repositoryLabel: '`{repositoryLabel}`'

  # Repository format for latest release.
  # Formatting does not applied when repository has no any release, in this case empty string returned.
  # Available values:
  #   context: Context object passed into action as 'context' parameter.
  #   repository: Repository object.
  #   release: Repository latest release object.
  repositoryRelease: '`{release.name}` '

  # Setting to group repositories before formatting.
  # Description of group settings.
  # group:
  #   name: Name of group.
  #   description: Description of group.
  #   topics: List of comma separated topic names used to determine whether to include repository in group. (Example: 'preview,legacy'.)
  groups:
  - name: Featured
    description: Projects featured to be used.
    topics: featured
  - name: Main
    description: Organization main repositories.
    topics: main
  - name: Modules
    description: Module projects compatible with [UGF.Application](https://github.com/unity-game-framework/ugf-application) project.
    topics: module
  - name: Active
    description: Current actively developed projects.
    topics: active
  - name: Preview
    description: Work in progress preview projects.
    topics: preview
  - name: Experimental
    description: Draft experimental projects.
    topics: experimental
  - name: Deprecated
    description: Not recommended to use deprecated projects.
    topics: deprecated
  - name: Other
    description: Other repositories.
    topics: other
  - name: Legacy
    description: Legacy no longer maintained projects.
    topics: legacy

notes:
  # Body format of release changelog.
  # Available values:
  #   context: Context object passed into action as 'context' parameter.
  #   milestone: Milestone object. (Read about milestone object: https://docs.github.com/en/rest/reference/issues#get-a-milestone.)
  #   groups: Array of the group objects. (Read about group object below.)
  #   groupsFormatted: Formatted groups as text.
  # Description of group object.
  # group:
  #   name: Name of group from config.
  #   issues: Array of issue objects. (Read about issue object: https://docs.github.com/en/rest/reference/issues#get-an-issue.)
  body: |
    ### Release Notes

    - [Milestone]({milestone.html_url}?closed=1)  
        {milestone.description}
    
    {groupsFormatted}

  # Used instead of 'body' format when no any issues found for milestone.
  empty: |
    ### Release Notes

    - No release notes.

  # Group format of issues.
  # Available values:
  #   context: Context object passed into action as 'context' parameter.
  #   milestone: Milestone object. (Same as milestone in body.)
  #   groups: Array of the group objects. (Same as groups in body.)
  #   group: Group object. (Read about group in body description.)
  #   issuesFormatted: Formatted issues as text.
  group: |
    ### {group.name}
    
    {issuesFormatted}

  # Issue format from group.
  # Available values:
  #   context: Context object passed into action as 'context' parameter.
  #   milestone: Milestone object. (Same as 'milestone' in body.)
  #   groups: Array of the group objects. (Same as 'groups' in body.)
  #   group: Group object. (Read about 'group' in body description.)
  #   issue: Issue object. (Read about issue object: https://docs.github.com/en/rest/reference/issues#get-an-issue.)
  issue: |
    - {issue.title} ([#{issue.number}]({issue.html_url}))  

  # Determines whether to include indented issue body after 'issue' format.
  issueBody: true

  # Setting to group issues before formatting.
  # Every group has some properties.
  # group:
  #   name: Name of group.
  #   state: State of issue to find in milestone. (Possible values: 'open', 'closed' or 'all', more about issues: https://docs.github.com/en/rest/reference/issues.)
  #   labels: List of comma separated label names used to determine whether to include issue in group. (Example: 'bug,fix'.) 
  groups:
  - name: Added
    state: all
    labels: Feature
  - name: Changed
    state: all
    labels: Change
  - name: Deprecated
    state: all
    labels: Deprecation
  - name: Removed
    state: all
    labels: Remove
  - name: Fixed
    state: all
    labels: Fix
  - name: Security
    state: all
    labels: Security